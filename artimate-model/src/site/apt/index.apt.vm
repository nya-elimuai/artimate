~~~
~~ #%L
~~ Artimate Model Compiler
~~ %%
~~ Copyright (C) 2011 - 2012 INRIA
~~ %%
~~ This program is free software: you can redistribute it and/or modify
~~ it under the terms of the GNU General Public License as
~~ published by the Free Software Foundation, either version 3 of the 
~~ License, or (at your option) any later version.
~~ 
~~ This program is distributed in the hope that it will be useful,
~~ but WITHOUT ANY WARRANTY; without even the implied warranty of
~~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
~~ GNU General Public License for more details.
~~ 
~~ You should have received a copy of the GNU General Public 
~~ License along with this program.  If not, see
~~ <http://www.gnu.org/licenses/gpl-3.0.html>.
~~ #L%
~~~
 ---
 ${project.name}
 ---

  The ${project.name} generates a Maven project in a <staging directory> of your choice,
  which in turn is then built to compile the model.

Generating the compiler project

 Once <<Artimate>> is installed, go to a directory where the staging directory should be created
 and generate the <model project> from the ${project.artifactId} archetype.
 This can be done interactively, restricting archetype search to your local catalog, i.e.
 
+--
$ mvn archetype:generate -DarchetypeCatalog=local
+--

 or better yet, looking only for archetypes with "artimate" in their name:

+--
$ mvn archetype:generate -Dfilter=artimate
+--

 The quickest way is to run the generate command in batch mode (<<<-B>>> option) using a command like

+--
$ mvn archetype:generate -B \
  -DarchetypeGroupId=${project.groupId} \
  -DarchetypeArtifactId=${project.artifactId} \
  -DarchetypeVersion=${project.version} \
  -DgroupId=my.group \
  -DartifactId=tongue-model-test \
  -Dversion=1.0
+--

 where <<<my.group>>>, <<<tongue-model-test>>>, and <<<1.0>>> should of course be customized.

Prerequisites

  The following third-party programs must be available on your system.
  For each, the path to the main program executable must be configured as a <property> for ${project.name} to work.
  This can be done either on the command line, using <<<-Dpath.to.program=/path/on/my/system/program>>>,
  or by editing the file <<<build.config>>> in your staging directory.

* Python
 
  {{{http://python.org/}Python home page}}

  Property: <<<path.to.python>>>

* Praat
 
  {{{http://praat.org/}Praat home page}}
  
  Property: <<<path.to.praat>>>
  
  <<Note:>> Make sure that Praat is configured to write text files in UTF-8 encoding.
  
* Perl
 
  {{{http://www.perl.org/}Perl home page}}

* Blender
 
  {{{http://www.blender.org/}Blender home page}}
  
  Property: <<<path.to.blender>>>
  
  <<Note:>> At least version 2.62 is required.
  
Providing the data

  The model compiler needs to know where to find the raw source data for the model,
  in the form of EMA data and a tongue mesh file.
  
  Property: <<<data.directory>>>

Compiling the model

  Once all software and data are available and the corresponding properties are defined correctly,
  go to the staging directory and run the command
  
+--
$ mvn install
+--

  Alternatively, if you only want to compile and package the model without installing it into your local Maven repository,
  run the command

+--
$ mvn package
+--
